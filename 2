import GlobalAppliedExceptionsService from "../../services/GlobalAppliedExceptionsService";

export default {
  namespaced: true,

  state: () => ({
    globalExceptions: [], // holds fetched GlobalAppliedException records
    isLoading: false,
    error: null,
  }),

  mutations: {
    SET_GLOBAL_EXCEPTIONS(state, exceptions) {
      state.globalExceptions = exceptions.sort((a, b) =>
        a.date.localeCompare(b.date),
      );
    },
    ADD_GLOBAL_EXCEPTION(state, exc) {
      state.globalExceptions.push(exc);
      state.globalExceptions.sort((a, b) => a.date.localeCompare(b.date));
    },
    UPDATE_GLOBAL_EXCEPTION(state, updated) {
      const idx = state.globalExceptions.findIndex(
        (e) => e.date === updated.date,
      );
      if (idx >= 0) state.globalExceptions.splice(idx, 1, updated);
    },
    REMOVE_GLOBAL_EXCEPTION(state, date) {
      state.globalExceptions = state.globalExceptions.filter(
        (e) => e.date !== date,
      );
    },
    SET_LOADING(state, val) {
      state.isLoading = val;
    },
    SET_ERROR(state, err) {
      state.error = err;
      state.isLoading = false;
    },
  },

  actions: {
    async fetchGlobalExceptions({ commit }) {
      commit("SET_LOADING", true);
      commit("SET_ERROR", null);
      try {
        const { data } = await GlobalAppliedExceptionsService.getAll();
        commit("SET_GLOBAL_EXCEPTIONS", data);
      } catch (err) {
        commit("SET_ERROR", err.response?.data?.message || err.message);
      } finally {
        commit("SET_LOADING", false);
      }
    },
    async applyGlobalException({ commit }, payload) {
      commit("SET_ERROR", null);
      try {
        const { data } = await GlobalAppliedExceptionsService.apply(payload);
        commit("ADD_GLOBAL_EXCEPTION", data);
      } catch (err) {
        commit("SET_ERROR", err.response?.data?.message || err.message);
        throw err;
      }
    },
    async updateGlobalException({ commit }, { date, data }) {
      commit("SET_ERROR", null);
      try {
        const { data: updated } = await GlobalAppliedExceptionsService.update(
          date,
          data,
        );
        commit("UPDATE_GLOBAL_EXCEPTION", updated);
      } catch (err) {
        commit("SET_ERROR", err.response?.data?.message || err.message);
        throw err;
      }
    },
    async deleteGlobalException({ commit }, date) {
      commit("SET_ERROR", null);
      try {
        await GlobalAppliedExceptionsService.delete(date);
        commit("REMOVE_GLOBAL_EXCEPTION", date);
      } catch (err) {
        commit("SET_ERROR", err.response?.data?.message || err.message);
        throw err;
      }
    },
  },

  getters: {
    allGlobalExceptions: (state) => state.globalExceptions,
    isLoading: (state) => state.isLoading,
    error: (state) => state.error,
    getGlobalExceptionForDate: (state) => (dateString) =>
      state.globalExceptions.find((e) => e.date === dateString),
    patternsList: (state) =>
      state.globalExceptions
        .map((exc) => exc.ExceptionPattern)
        .filter((pat) => pat != null),
  },
};
